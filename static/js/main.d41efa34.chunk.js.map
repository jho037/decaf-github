{"version":3,"sources":["components/pages/Home.js","components/pages/Publications.js","components/pages/Introduction.js","components/layout/Navigation.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","href","src","dataSource","sourceType","screenName","options","height","Component","Publications","Intro","Navigation","to","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","path","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAqCeA,E,iLA/BP,OACI,yBAAKC,UAAU,WAEf,qCACA,4EAEA,srBAM2E,uBAAGC,KAAK,0FAAR,oBAN3E,0CAOwC,uBAAGA,KAAK,gEAAR,gBAPxC,UAUA,yBAAKC,IAAI,+EAEH,kBAAC,WAAD,CACEC,WAAY,CACZC,WAAY,UACZC,WAAY,YAEZC,QAAS,CACTC,OAAQ,c,GA1BTC,aCYJC,G,wLAXP,OACI,yBAAKT,UAAU,OACf,2CACA,mPAAwN,gHACxN,kXAAsV,mFACtV,0OACA,oP,GAReQ,cC6DZE,G,wLA3DP,OACI,yBAAKV,UAAU,SACf,qDACA,qLACI,uBAAGC,KAAK,oCAAR,aADJ,gBAEI,uBAAGA,KAAK,oDAAR,eAFJ,WAGI,uBAAGA,KAAK,oCAAR,aAHJ,wBAII,uBAAGA,KAAK,+CAAR,cAJJ,oFAMA,yBAAKC,IAAI,oBACT,wMAIA,6BACA,0EACA,+oBAQA,6BACA,6DACA,4pBAIiF,uFAGjF,6BACA,4DACA,4lBAMA,6BACA,kEACA,qbAKA,6BACA,iEACA,omB,GApDQM,cC8CLG,MA3Cf,WACI,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,gDACrB,kBAAC,IAAD,CAAMA,UAAU,0BAA0BY,GAAG,SAA7C,YAAgE,uBAAGC,MAAM,oBACzE,4BAAQb,UAAU,iBAAiBc,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMnB,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BoB,GAAG,0BAC3C,wBAAIpB,UAAU,oBACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,0CAA0CY,GAAG,iBAA7D,gBAA0F,0BAAMZ,UAAU,WAAhB,eAE5F,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,0CAA0CC,KAAK,+CAA5D,YAAmH,0BAAMD,UAAU,WAAhB,eAErH,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,0CAA0CY,GAAG,iBAA7D,oBAOR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,U,OC5BSC,MAZf,WACI,OAEJ,4BAAQvB,UAAU,+CAChB,yBAAKA,UAAU,mDAAf,yBCeawB,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUhB,aCEEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d41efa34.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Home.css';\r\nimport { Timeline } from 'react-twitter-widgets'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Summary\">\r\n            \r\n            <h1>DECAF</h1>\r\n            <h2>(Dynamic Executable Code Analysis Framework)</h2>\r\n            \r\n            <p>DECAF++, the new version of DECAF, taint analysis is around 2X faster making it the fastest,\r\n            to the best of our knowledge, whole-system dynamic taint analysis framework. This results in \r\n            a much better usability imposing only 4% overhead (SPEC CPU2006) when no suspicious (tainted) \r\n            input exists. Even under heavy taint analysis workloads, DECAF++ has a much better performance,\r\n            around 25% faster on nbench, because of its elasticity. DECAF++ elasticity makes it a very suitable\r\n            case for security analysis tasks that would selectively analyze the input e.g. Intrusion Detection Systems (IDS)\r\n            that can filter out benign traffic. For further technical details, see our <a href=\"https://www.cs.ucr.edu/~adava003/RAID__Elastic_Whole_System_Dynamic_Taint_Analysis.pdf\">Raid 2019 paper.</a>\r\n             To activate the optimizations, see our <a href=\"https://github.com/decaf-project/DECAF/wiki/DECAF--plus-plus\">DECAF++ Wiki</a> page.\r\n            </p>\r\n\r\n            <img src=\"https://raw.githubusercontent.com/decaf-project/DECAF/master/docs/SPEC.png\"></img>\r\n\r\n                  <Timeline\r\n                    dataSource={{\r\n                    sourceType: 'profile',\r\n                    screenName: 'heng_yin'\r\n                    }}\r\n                    options={{\r\n                    height: '800'\r\n                    }}\r\n                />\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react'\r\nimport './Publications.css';\r\n\r\nclass Publications extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Pub\">\r\n            <h>Publications</h>\r\n            <p>1. Ali Davanian, Zhenxiao Qi, Yu Qu, and Heng Yin, DECAF++: Elastic Whole-System Dynamic Taint Analysis, In the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID), September 2019. <b>(If you wish to cite the new optimized version of DECAF, please cite this paper)</b></p>\r\n            <p>2. \"Make it work, make it right, make it fast: building a platform-neutral whole-system dynamic binary analysis platform\", Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen Wang, Rundong Zhou, and Heng Yin, to appear in the International Symposium on Software Testing and Analysis (ISSTA'14), San Jose, CA, July 2014. <b>(If you wish to cite DECAF, please cite this paper)</b></p>\r\n            <p>3. Lok Kwong Yan, Andrew Henderson, Xunchao Hu, Heng Yin, and Stephen McCamant?.On soundness and precision of dynamic taint analysis. Technical Report SYR-EECS-2014-04, Syracuse University, January 2014.</p>\r\n            <p>4. DroidScope: Seamlessly Reconstructing OS and Dalvik Semantic Views for Dynamic Android Malware Analysis\", Lok-Kwong Yan and Heng Yin, in the 21st USENIX Security Symposium, Bellevue, WA, August 8-10, 2012.</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Publications;\r\n","import React, { Component } from 'react'\r\nimport './Introduction.css';\r\n\r\nclass Intro extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Intro\">\r\n            <h1>Introduction to DECAF</h1>\r\n            <p>DECAF (Dynamic Executable Code Analysis Framework) is the successor to the binary analysis techniques developed for TEMU (dynamic analysis component of \r\n                <a href=\"http://bitblaze.cs.berkeley.edu/\"> BitBlaze</a> ) as part of \r\n                <a href=\"https://eng-cs.syr.edu/directory/?peopleid=13036\"> Heng Yin's</a> work on \r\n                <a href=\"http://bitblaze.cs.berkeley.edu/\"> BitBlaze</a> project headed up by \r\n                <a href=\"https://people.eecs.berkeley.edu/~dawnsong/\"> Dawn Song</a>. DECAF builds upon TEMU. We appreciate all that worked with us on that project.\r\n                </p>\r\n            <img src=\"Intro_image.png\"></img>\r\n            <p>Fig 1 illustrates the overall architecture of DECAF. DECAF is a platform-agnostic whole-system dynamic binary analysis framework. \r\n                It provides the following key features.\r\n            </p>\r\n\r\n            <hr></hr>\r\n            <h>Right-on-Time Virtual Machine Introspection</h>\r\n            <p>Different with TEMU, DECAF doesn’t use guest driver to retrieve os-level semantics. \r\n                The VMI component of DECAF is able to reconstruct a fresh OS-level view of the virtual machine, \r\n                including processes, threads, code modules, and symbols to support binary analysis. Further, \r\n                in order to support multiple architectures and operating systems, it follows as a platform-agnostic design. \r\n                The workflow for extracting OS-level semantic information is common across multiple architectures and operating systems. \r\n                The only platform- specific handling lies in what kernel data structures and what fields to extract information from.\r\n                </p>\r\n\r\n            <hr></hr>\r\n            <h>Support for Multiple Platforms</h>\r\n            <p>Ideally, we would like to have the same analysis code (with minimum platform-specific code) to work for different CPU architectures \r\n                (e.g, x86 and ARM) and different operating systems (e.g., Windows and Linux). It requires that the analysis framework hide the architecture \r\n                and operating system specific details from the analysis plugins. Further, to make the analysis framework itself maintainable and extensible to \r\n                new architectures and operat-ing systems, the platform-specific code within the framework should also be minimized. DECAF can provide support for \r\n                both multiple architectures and multiple operating systems. Currently, DECAF <b>supports 32 bit Windows xp/Windows 7/linux and X86/arm.</b>\r\n                </p>\r\n                \r\n            <hr></hr>\r\n            <h>Precise and Lossless Tainting</h>\r\n            <p>DECAF ensures precise tainting by maintaining bit-level precision for CPU registers and memory, and inlining precise tainting rules in the translated code blocks. \r\n                Thus, the taint status for each CPU register and memory location is processed and updated synchronously during the code execution of the virtual machine. \r\n                The propagation of taint labels is done in an asynchronous manner . By implementing such a tainting logic mainly in the intermediate representation level \r\n                (more concretely, TCG IR level), it becomes easy to extend tainting support to a new CPU architecture.\r\n                </p>\r\n            \r\n            <hr></hr>\r\n            <h>Event-driven programming interfaces</h>\r\n            <p>DECAF provides an event-driven programming interface. It means that the paradigm of ”instrument” in the translation phase and then analyze in the execution phase” \r\n                is invisible to the analysis plugins. The analysis plugins only need to register for interested events and implement corresponding event handling functions. \r\n                The details of code instrumentation are taken care of by the framework.\r\n                </p>\r\n            \r\n            <hr></hr>\r\n            <h>Dynamic instrumentation management</h>\r\n            <p>To reduce runtime overhead, the instrumentation code is inserted into the translated code only when necessary. For example, when a plugin registers a function hook \r\n                at a function’s entry point, the instrumentation code for this hook is only placed at the function entry point. When the plugin unregisters this function hook, \r\n                the instrumentation code will also be removed from the translated code accordingly. To ease the development of plugins, the management of dynamic code instrumentation\r\n                 is completely taken care of in the framework, and thus invisible to the plugins.\r\n                 </p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Intro;","import React from 'react';\r\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\";\r\nimport Home from '../pages/Home.js';\r\nimport Publications from '../pages/Publications.js'\r\nimport Introduction from '../pages/Introduction.js'\r\n\r\nfunction Navigation() {\r\n    return(\r\n      <Router>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n  <Link className=\"navbar-brand text-white\" to=\"/home\">DECAF&nbsp;<i class=\"fas fa-mug-hot\"></i></Link>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav ml-10\">\r\n      <li className=\"nav-item active\">\r\n        <Link className=\"nav-link text-white text-uppercase ml-5\" to=\"/Introduction\">Introduction <span className=\"sr-only\">(current)</span></Link>\r\n      </li>\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link text-white text-uppercase ml-5\" href=\"https://github.com/decaf-project/DECAF/wiki\">WikiPage <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link text-white text-uppercase ml-5\" to=\"/publications\">Publications</Link>\r\n      </li>\r\n      \r\n    </ul>\r\n  </div>\r\n</nav>\r\n\r\n<Switch>\r\n    <Route exact path=\"\">\r\n      <Home />\r\n    </Route>\r\n    <Route path=\"/home\">\r\n      <Home />\r\n    </Route>\r\n    <Route path=\"/publications\">\r\n      <Publications />\r\n    </Route>\r\n    <Route path=\"/introduction\">\r\n      <Introduction />\r\n    </Route>\r\n  </Switch>\r\n</Router>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n    // <div className=\"navbar fixed-bottom page-footer\">\r\n<footer className=\"page-footer fixed-bottom font-small bg-dark\">\r\n  <div className=\"footer-copyright text-left py-3 text-white ml-3\">© 2019 Copyright\r\n  </div>\r\n</footer>\r\n// </div>  \r\n            /* <a href=\"https://github.com/decaf-project/DECAF\" class=\"Git\">GitHub</a> */\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport Navigation from './components/layout/Navigation.js'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport Footer from './components/layout/Footer.js'\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Navigation></Navigation>\r\n        <Footer></Footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}